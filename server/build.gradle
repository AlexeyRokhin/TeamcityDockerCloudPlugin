apply plugin: 'java'
apply plugin: "jacoco"

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    if (project.hasProperty('rt7jar')) {
        options.compilerArgs << "-Xbootclasspath:${project.rt7jar}"
    }
}
compileTestJava {
    // Enable Java 1.8 goodies for testing. God I love gradle.
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    if (project.hasProperty('rt8jar')) {
        options.compilerArgs << "-Xbootclasspath:${project.rt8jar}"
    }
}


dependencies {
    provided 'org.jetbrains.teamcity:cloud-interface:10.0'
    provided 'org.jetbrains.teamcity:server-api:10.0'
    //provided 'org.jetbrains.teamcity:web:9.1.5'
    provided 'com.github.docker-java:docker-java:3.0.0-RC5'
    compile 'de.gesellix:unix-socket-factory:2016-04-06T22-21-19'
    //compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    //compile 'org.slf4j:slf4j-api:1.7.21'
    provided 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.glassfish.jersey.core:jersey-client:2.23.1'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.23.1'
    compile 'org.glassfish.jersey.connectors:jersey-apache-connector:2.23.1'

    provided 'org.atmosphere:atmosphere-runtime:2.2.4'
    testCompile group: 'org.testng', name: 'testng', version: '6.9.13.6'
    testCompile 'org.assertj:assertj-core:3.5.2'
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {

            fileTree(dir: it, exclude:
                    [
                            // Exclude the ApacheConnector related classes from test code coverage. We do not own most
                            // of the code there.
                            'run/var/teamcity/cloud/docker/client/apcon/**',
                            // Also exclude the package linked to the Atmosphere framework. It only contains a couple
                            // of minimalist classes with a direct dependency Atmosphere which cannot be mocked.
                            'run/var/teamcity/cloud/docker/web/atmo/**'
                    ])
        })
    }
}

test {
    useTestNG()
}
